// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/compute-daisy/daisy/compute

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	compute "github.com/GoogleCloudPlatform/compute-daisy/compute"
	gomock "github.com/golang/mock/gomock"
	compute0 "google.golang.org/api/compute/v0.alpha"
	compute1 "google.golang.org/api/compute/v0.beta"
	compute2 "google.golang.org/api/compute/v1"
	googleapi "google.golang.org/api/googleapi"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AggregatedListDisks mocks base method.
func (m *MockClient) AggregatedListDisks(project string, opts ...compute.ListCallOption) ([]*compute2.Disk, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AggregatedListDisks", varargs...)
	ret0, _ := ret[0].([]*compute2.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregatedListDisks indicates an expected call of AggregatedListDisks.
func (mr *MockClientMockRecorder) AggregatedListDisks(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatedListDisks", reflect.TypeOf((*MockClient)(nil).AggregatedListDisks), varargs...)
}

// AggregatedListInstances mocks base method.
func (m *MockClient) AggregatedListInstances(project string, opts ...compute.ListCallOption) ([]*compute2.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AggregatedListInstances", varargs...)
	ret0, _ := ret[0].([]*compute2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregatedListInstances indicates an expected call of AggregatedListInstances.
func (mr *MockClientMockRecorder) AggregatedListInstances(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatedListInstances", reflect.TypeOf((*MockClient)(nil).AggregatedListInstances), varargs...)
}

// AggregatedListSubnetworks mocks base method.
func (m *MockClient) AggregatedListSubnetworks(project string, opts ...compute.ListCallOption) ([]*compute2.Subnetwork, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AggregatedListSubnetworks", varargs...)
	ret0, _ := ret[0].([]*compute2.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregatedListSubnetworks indicates an expected call of AggregatedListSubnetworks.
func (mr *MockClientMockRecorder) AggregatedListSubnetworks(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatedListSubnetworks", reflect.TypeOf((*MockClient)(nil).AggregatedListSubnetworks), varargs...)
}

// AttachDisk mocks base method.
func (m *MockClient) AttachDisk(project, zone, instance string, d *compute2.AttachedDisk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachDisk", project, zone, instance, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachDisk indicates an expected call of AttachDisk.
func (mr *MockClientMockRecorder) AttachDisk(project, zone, instance, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDisk", reflect.TypeOf((*MockClient)(nil).AttachDisk), project, zone, instance, d)
}

// BasePath mocks base method.
func (m *MockClient) BasePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BasePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// BasePath indicates an expected call of BasePath.
func (mr *MockClientMockRecorder) BasePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BasePath", reflect.TypeOf((*MockClient)(nil).BasePath))
}

// CreateDisk mocks base method.
func (m *MockClient) CreateDisk(project, zone string, d *compute2.Disk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisk", project, zone, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDisk indicates an expected call of CreateDisk.
func (mr *MockClientMockRecorder) CreateDisk(project, zone, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisk", reflect.TypeOf((*MockClient)(nil).CreateDisk), project, zone, d)
}

// CreateDiskAlpha mocks base method.
func (m *MockClient) CreateDiskAlpha(project, zone string, d *compute0.Disk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiskAlpha", project, zone, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiskAlpha indicates an expected call of CreateDiskAlpha.
func (mr *MockClientMockRecorder) CreateDiskAlpha(project, zone, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskAlpha", reflect.TypeOf((*MockClient)(nil).CreateDiskAlpha), project, zone, d)
}

// CreateDiskBeta mocks base method.
func (m *MockClient) CreateDiskBeta(project, zone string, d *compute1.Disk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiskBeta", project, zone, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiskBeta indicates an expected call of CreateDiskBeta.
func (mr *MockClientMockRecorder) CreateDiskBeta(project, zone, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskBeta", reflect.TypeOf((*MockClient)(nil).CreateDiskBeta), project, zone, d)
}

// CreateFirewallRule mocks base method.
func (m *MockClient) CreateFirewallRule(project string, i *compute2.Firewall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirewallRule", project, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFirewallRule indicates an expected call of CreateFirewallRule.
func (mr *MockClientMockRecorder) CreateFirewallRule(project, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirewallRule", reflect.TypeOf((*MockClient)(nil).CreateFirewallRule), project, i)
}

// CreateForwardingRule mocks base method.
func (m *MockClient) CreateForwardingRule(project, region string, fr *compute2.ForwardingRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForwardingRule", project, region, fr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateForwardingRule indicates an expected call of CreateForwardingRule.
func (mr *MockClientMockRecorder) CreateForwardingRule(project, region, fr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForwardingRule", reflect.TypeOf((*MockClient)(nil).CreateForwardingRule), project, region, fr)
}

// CreateImage mocks base method.
func (m *MockClient) CreateImage(project string, i *compute2.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", project, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockClientMockRecorder) CreateImage(project, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockClient)(nil).CreateImage), project, i)
}

// CreateImageAlpha mocks base method.
func (m *MockClient) CreateImageAlpha(project string, i *compute0.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageAlpha", project, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageAlpha indicates an expected call of CreateImageAlpha.
func (mr *MockClientMockRecorder) CreateImageAlpha(project, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageAlpha", reflect.TypeOf((*MockClient)(nil).CreateImageAlpha), project, i)
}

// CreateImageBeta mocks base method.
func (m *MockClient) CreateImageBeta(project string, i *compute1.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageBeta", project, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageBeta indicates an expected call of CreateImageBeta.
func (mr *MockClientMockRecorder) CreateImageBeta(project, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageBeta", reflect.TypeOf((*MockClient)(nil).CreateImageBeta), project, i)
}

// CreateInstance mocks base method.
func (m *MockClient) CreateInstance(project, zone string, i *compute2.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", project, zone, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockClientMockRecorder) CreateInstance(project, zone, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockClient)(nil).CreateInstance), project, zone, i)
}

// CreateInstanceAlpha mocks base method.
func (m *MockClient) CreateInstanceAlpha(project, zone string, i *compute0.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceAlpha", project, zone, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceAlpha indicates an expected call of CreateInstanceAlpha.
func (mr *MockClientMockRecorder) CreateInstanceAlpha(project, zone, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceAlpha", reflect.TypeOf((*MockClient)(nil).CreateInstanceAlpha), project, zone, i)
}

// CreateInstanceBeta mocks base method.
func (m *MockClient) CreateInstanceBeta(project, zone string, i *compute1.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceBeta", project, zone, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceBeta indicates an expected call of CreateInstanceBeta.
func (mr *MockClientMockRecorder) CreateInstanceBeta(project, zone, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceBeta", reflect.TypeOf((*MockClient)(nil).CreateInstanceBeta), project, zone, i)
}

// CreateMachineImage mocks base method.
func (m *MockClient) CreateMachineImage(project string, i *compute2.MachineImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachineImage", project, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMachineImage indicates an expected call of CreateMachineImage.
func (mr *MockClientMockRecorder) CreateMachineImage(project, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachineImage", reflect.TypeOf((*MockClient)(nil).CreateMachineImage), project, i)
}

// CreateNetwork mocks base method.
func (m *MockClient) CreateNetwork(project string, n *compute2.Network) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", project, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockClientMockRecorder) CreateNetwork(project, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockClient)(nil).CreateNetwork), project, n)
}

// CreateSnapshot mocks base method.
func (m *MockClient) CreateSnapshot(project, zone, disk string, s *compute2.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", project, zone, disk, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockClientMockRecorder) CreateSnapshot(project, zone, disk, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockClient)(nil).CreateSnapshot), project, zone, disk, s)
}

// CreateSubnetwork mocks base method.
func (m *MockClient) CreateSubnetwork(project, region string, n *compute2.Subnetwork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnetwork", project, region, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubnetwork indicates an expected call of CreateSubnetwork.
func (mr *MockClientMockRecorder) CreateSubnetwork(project, region, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetwork", reflect.TypeOf((*MockClient)(nil).CreateSubnetwork), project, region, n)
}

// CreateTargetInstance mocks base method.
func (m *MockClient) CreateTargetInstance(project, zone string, ti *compute2.TargetInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetInstance", project, zone, ti)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTargetInstance indicates an expected call of CreateTargetInstance.
func (mr *MockClientMockRecorder) CreateTargetInstance(project, zone, ti interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetInstance", reflect.TypeOf((*MockClient)(nil).CreateTargetInstance), project, zone, ti)
}

// DeleteDisk mocks base method.
func (m *MockClient) DeleteDisk(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisk", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDisk indicates an expected call of DeleteDisk.
func (mr *MockClientMockRecorder) DeleteDisk(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisk", reflect.TypeOf((*MockClient)(nil).DeleteDisk), project, zone, name)
}

// DeleteFirewallRule mocks base method.
func (m *MockClient) DeleteFirewallRule(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallRule", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFirewallRule indicates an expected call of DeleteFirewallRule.
func (mr *MockClientMockRecorder) DeleteFirewallRule(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallRule", reflect.TypeOf((*MockClient)(nil).DeleteFirewallRule), project, name)
}

// DeleteForwardingRule mocks base method.
func (m *MockClient) DeleteForwardingRule(project, region, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForwardingRule", project, region, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForwardingRule indicates an expected call of DeleteForwardingRule.
func (mr *MockClientMockRecorder) DeleteForwardingRule(project, region, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForwardingRule", reflect.TypeOf((*MockClient)(nil).DeleteForwardingRule), project, region, name)
}

// DeleteImage mocks base method.
func (m *MockClient) DeleteImage(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockClientMockRecorder) DeleteImage(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockClient)(nil).DeleteImage), project, name)
}

// DeleteInstance mocks base method.
func (m *MockClient) DeleteInstance(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockClientMockRecorder) DeleteInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockClient)(nil).DeleteInstance), project, zone, name)
}

// DeleteMachineImage mocks base method.
func (m *MockClient) DeleteMachineImage(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachineImage", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachineImage indicates an expected call of DeleteMachineImage.
func (mr *MockClientMockRecorder) DeleteMachineImage(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachineImage", reflect.TypeOf((*MockClient)(nil).DeleteMachineImage), project, name)
}

// DeleteNetwork mocks base method.
func (m *MockClient) DeleteNetwork(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockClientMockRecorder) DeleteNetwork(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockClient)(nil).DeleteNetwork), project, name)
}

// DeleteSnapshot mocks base method.
func (m *MockClient) DeleteSnapshot(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockClientMockRecorder) DeleteSnapshot(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockClient)(nil).DeleteSnapshot), project, name)
}

// DeleteSubnetwork mocks base method.
func (m *MockClient) DeleteSubnetwork(project, region, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnetwork", project, region, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnetwork indicates an expected call of DeleteSubnetwork.
func (mr *MockClientMockRecorder) DeleteSubnetwork(project, region, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetwork", reflect.TypeOf((*MockClient)(nil).DeleteSubnetwork), project, region, name)
}

// DeleteTargetInstance mocks base method.
func (m *MockClient) DeleteTargetInstance(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetInstance", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTargetInstance indicates an expected call of DeleteTargetInstance.
func (mr *MockClientMockRecorder) DeleteTargetInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetInstance", reflect.TypeOf((*MockClient)(nil).DeleteTargetInstance), project, zone, name)
}

// DeprecateImage mocks base method.
func (m *MockClient) DeprecateImage(project, name string, deprecationstatus *compute2.DeprecationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeprecateImage", project, name, deprecationstatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeprecateImage indicates an expected call of DeprecateImage.
func (mr *MockClientMockRecorder) DeprecateImage(project, name, deprecationstatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprecateImage", reflect.TypeOf((*MockClient)(nil).DeprecateImage), project, name, deprecationstatus)
}

// DeprecateImageAlpha mocks base method.
func (m *MockClient) DeprecateImageAlpha(project, name string, deprecationstatus *compute0.DeprecationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeprecateImageAlpha", project, name, deprecationstatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeprecateImageAlpha indicates an expected call of DeprecateImageAlpha.
func (mr *MockClientMockRecorder) DeprecateImageAlpha(project, name, deprecationstatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprecateImageAlpha", reflect.TypeOf((*MockClient)(nil).DeprecateImageAlpha), project, name, deprecationstatus)
}

// DetachDisk mocks base method.
func (m *MockClient) DetachDisk(project, zone, instance, disk string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachDisk", project, zone, instance, disk)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachDisk indicates an expected call of DetachDisk.
func (mr *MockClientMockRecorder) DetachDisk(project, zone, instance, disk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDisk", reflect.TypeOf((*MockClient)(nil).DetachDisk), project, zone, instance, disk)
}

// GetDisk mocks base method.
func (m *MockClient) GetDisk(project, zone, name string) (*compute2.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisk", project, zone, name)
	ret0, _ := ret[0].(*compute2.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisk indicates an expected call of GetDisk.
func (mr *MockClientMockRecorder) GetDisk(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisk", reflect.TypeOf((*MockClient)(nil).GetDisk), project, zone, name)
}

// GetDiskAlpha mocks base method.
func (m *MockClient) GetDiskAlpha(project, zone, name string) (*compute0.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskAlpha", project, zone, name)
	ret0, _ := ret[0].(*compute0.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskAlpha indicates an expected call of GetDiskAlpha.
func (mr *MockClientMockRecorder) GetDiskAlpha(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskAlpha", reflect.TypeOf((*MockClient)(nil).GetDiskAlpha), project, zone, name)
}

// GetDiskBeta mocks base method.
func (m *MockClient) GetDiskBeta(project, zone, name string) (*compute1.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskBeta", project, zone, name)
	ret0, _ := ret[0].(*compute1.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskBeta indicates an expected call of GetDiskBeta.
func (mr *MockClientMockRecorder) GetDiskBeta(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskBeta", reflect.TypeOf((*MockClient)(nil).GetDiskBeta), project, zone, name)
}

// GetFirewallRule mocks base method.
func (m *MockClient) GetFirewallRule(project, name string) (*compute2.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRule", project, name)
	ret0, _ := ret[0].(*compute2.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRule indicates an expected call of GetFirewallRule.
func (mr *MockClientMockRecorder) GetFirewallRule(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRule", reflect.TypeOf((*MockClient)(nil).GetFirewallRule), project, name)
}

// GetForwardingRule mocks base method.
func (m *MockClient) GetForwardingRule(project, region, name string) (*compute2.ForwardingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForwardingRule", project, region, name)
	ret0, _ := ret[0].(*compute2.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForwardingRule indicates an expected call of GetForwardingRule.
func (mr *MockClientMockRecorder) GetForwardingRule(project, region, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForwardingRule", reflect.TypeOf((*MockClient)(nil).GetForwardingRule), project, region, name)
}

// GetGuestAttributes mocks base method.
func (m *MockClient) GetGuestAttributes(project, zone, name, queryPath, variableKey string) (*compute2.GuestAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestAttributes", project, zone, name, queryPath, variableKey)
	ret0, _ := ret[0].(*compute2.GuestAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestAttributes indicates an expected call of GetGuestAttributes.
func (mr *MockClientMockRecorder) GetGuestAttributes(project, zone, name, queryPath, variableKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestAttributes", reflect.TypeOf((*MockClient)(nil).GetGuestAttributes), project, zone, name, queryPath, variableKey)
}

// GetImage mocks base method.
func (m *MockClient) GetImage(project, name string) (*compute2.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", project, name)
	ret0, _ := ret[0].(*compute2.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockClientMockRecorder) GetImage(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockClient)(nil).GetImage), project, name)
}

// GetImageAlpha mocks base method.
func (m *MockClient) GetImageAlpha(project, name string) (*compute0.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlpha", project, name)
	ret0, _ := ret[0].(*compute0.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAlpha indicates an expected call of GetImageAlpha.
func (mr *MockClientMockRecorder) GetImageAlpha(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlpha", reflect.TypeOf((*MockClient)(nil).GetImageAlpha), project, name)
}

// GetImageBeta mocks base method.
func (m *MockClient) GetImageBeta(project, name string) (*compute1.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageBeta", project, name)
	ret0, _ := ret[0].(*compute1.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageBeta indicates an expected call of GetImageBeta.
func (mr *MockClientMockRecorder) GetImageBeta(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageBeta", reflect.TypeOf((*MockClient)(nil).GetImageBeta), project, name)
}

// GetImageFromFamily mocks base method.
func (m *MockClient) GetImageFromFamily(project, family string) (*compute2.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFromFamily", project, family)
	ret0, _ := ret[0].(*compute2.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFromFamily indicates an expected call of GetImageFromFamily.
func (mr *MockClientMockRecorder) GetImageFromFamily(project, family interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFromFamily", reflect.TypeOf((*MockClient)(nil).GetImageFromFamily), project, family)
}

// GetInstance mocks base method.
func (m *MockClient) GetInstance(project, zone, name string) (*compute2.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", project, zone, name)
	ret0, _ := ret[0].(*compute2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockClientMockRecorder) GetInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockClient)(nil).GetInstance), project, zone, name)
}

// GetInstanceAlpha mocks base method.
func (m *MockClient) GetInstanceAlpha(project, zone, name string) (*compute0.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceAlpha", project, zone, name)
	ret0, _ := ret[0].(*compute0.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceAlpha indicates an expected call of GetInstanceAlpha.
func (mr *MockClientMockRecorder) GetInstanceAlpha(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceAlpha", reflect.TypeOf((*MockClient)(nil).GetInstanceAlpha), project, zone, name)
}

// GetInstanceBeta mocks base method.
func (m *MockClient) GetInstanceBeta(project, zone, name string) (*compute1.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBeta", project, zone, name)
	ret0, _ := ret[0].(*compute1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBeta indicates an expected call of GetInstanceBeta.
func (mr *MockClientMockRecorder) GetInstanceBeta(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBeta", reflect.TypeOf((*MockClient)(nil).GetInstanceBeta), project, zone, name)
}

// GetLicense mocks base method.
func (m *MockClient) GetLicense(project, name string) (*compute2.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicense", project, name)
	ret0, _ := ret[0].(*compute2.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicense indicates an expected call of GetLicense.
func (mr *MockClientMockRecorder) GetLicense(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockClient)(nil).GetLicense), project, name)
}

// GetMachineImage mocks base method.
func (m *MockClient) GetMachineImage(project, name string) (*compute2.MachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineImage", project, name)
	ret0, _ := ret[0].(*compute2.MachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineImage indicates an expected call of GetMachineImage.
func (mr *MockClientMockRecorder) GetMachineImage(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineImage", reflect.TypeOf((*MockClient)(nil).GetMachineImage), project, name)
}

// GetMachineType mocks base method.
func (m *MockClient) GetMachineType(project, zone, machineType string) (*compute2.MachineType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineType", project, zone, machineType)
	ret0, _ := ret[0].(*compute2.MachineType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineType indicates an expected call of GetMachineType.
func (mr *MockClientMockRecorder) GetMachineType(project, zone, machineType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineType", reflect.TypeOf((*MockClient)(nil).GetMachineType), project, zone, machineType)
}

// GetNetwork mocks base method.
func (m *MockClient) GetNetwork(project, name string) (*compute2.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", project, name)
	ret0, _ := ret[0].(*compute2.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockClientMockRecorder) GetNetwork(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockClient)(nil).GetNetwork), project, name)
}

// GetProject mocks base method.
func (m *MockClient) GetProject(project string) (*compute2.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", project)
	ret0, _ := ret[0].(*compute2.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockClientMockRecorder) GetProject(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockClient)(nil).GetProject), project)
}

// GetRegion mocks base method.
func (m *MockClient) GetRegion(project, region string) (*compute2.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", project, region)
	ret0, _ := ret[0].(*compute2.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockClientMockRecorder) GetRegion(project, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockClient)(nil).GetRegion), project, region)
}

// GetSerialPortOutput mocks base method.
func (m *MockClient) GetSerialPortOutput(project, zone, name string, port, start int64) (*compute2.SerialPortOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSerialPortOutput", project, zone, name, port, start)
	ret0, _ := ret[0].(*compute2.SerialPortOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSerialPortOutput indicates an expected call of GetSerialPortOutput.
func (mr *MockClientMockRecorder) GetSerialPortOutput(project, zone, name, port, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerialPortOutput", reflect.TypeOf((*MockClient)(nil).GetSerialPortOutput), project, zone, name, port, start)
}

// GetSnapshot mocks base method.
func (m *MockClient) GetSnapshot(project, name string) (*compute2.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", project, name)
	ret0, _ := ret[0].(*compute2.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockClientMockRecorder) GetSnapshot(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockClient)(nil).GetSnapshot), project, name)
}

// GetSubnetwork mocks base method.
func (m *MockClient) GetSubnetwork(project, region, name string) (*compute2.Subnetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetwork", project, region, name)
	ret0, _ := ret[0].(*compute2.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetwork indicates an expected call of GetSubnetwork.
func (mr *MockClientMockRecorder) GetSubnetwork(project, region, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetwork", reflect.TypeOf((*MockClient)(nil).GetSubnetwork), project, region, name)
}

// GetTargetInstance mocks base method.
func (m *MockClient) GetTargetInstance(project, zone, name string) (*compute2.TargetInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetInstance", project, zone, name)
	ret0, _ := ret[0].(*compute2.TargetInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetInstance indicates an expected call of GetTargetInstance.
func (mr *MockClientMockRecorder) GetTargetInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetInstance", reflect.TypeOf((*MockClient)(nil).GetTargetInstance), project, zone, name)
}

// GetZone mocks base method.
func (m *MockClient) GetZone(project, zone string) (*compute2.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZone", project, zone)
	ret0, _ := ret[0].(*compute2.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZone indicates an expected call of GetZone.
func (mr *MockClientMockRecorder) GetZone(project, zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZone", reflect.TypeOf((*MockClient)(nil).GetZone), project, zone)
}

// InstanceStatus mocks base method.
func (m *MockClient) InstanceStatus(project, zone, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceStatus", project, zone, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceStatus indicates an expected call of InstanceStatus.
func (mr *MockClientMockRecorder) InstanceStatus(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceStatus", reflect.TypeOf((*MockClient)(nil).InstanceStatus), project, zone, name)
}

// InstanceStopped mocks base method.
func (m *MockClient) InstanceStopped(project, zone, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceStopped", project, zone, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceStopped indicates an expected call of InstanceStopped.
func (mr *MockClientMockRecorder) InstanceStopped(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceStopped", reflect.TypeOf((*MockClient)(nil).InstanceStopped), project, zone, name)
}

// ListDisks mocks base method.
func (m *MockClient) ListDisks(project, zone string, opts ...compute.ListCallOption) ([]*compute2.Disk, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, zone}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDisks", varargs...)
	ret0, _ := ret[0].([]*compute2.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisks indicates an expected call of ListDisks.
func (mr *MockClientMockRecorder) ListDisks(project, zone interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, zone}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisks", reflect.TypeOf((*MockClient)(nil).ListDisks), varargs...)
}

// ListFirewallRules mocks base method.
func (m *MockClient) ListFirewallRules(project string, opts ...compute.ListCallOption) ([]*compute2.Firewall, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFirewallRules", varargs...)
	ret0, _ := ret[0].([]*compute2.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewallRules indicates an expected call of ListFirewallRules.
func (mr *MockClientMockRecorder) ListFirewallRules(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewallRules", reflect.TypeOf((*MockClient)(nil).ListFirewallRules), varargs...)
}

// ListForwardingRules mocks base method.
func (m *MockClient) ListForwardingRules(project, zone string, opts ...compute.ListCallOption) ([]*compute2.ForwardingRule, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, zone}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListForwardingRules", varargs...)
	ret0, _ := ret[0].([]*compute2.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForwardingRules indicates an expected call of ListForwardingRules.
func (mr *MockClientMockRecorder) ListForwardingRules(project, zone interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, zone}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForwardingRules", reflect.TypeOf((*MockClient)(nil).ListForwardingRules), varargs...)
}

// ListImages mocks base method.
func (m *MockClient) ListImages(project string, opts ...compute.ListCallOption) ([]*compute2.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImages", varargs...)
	ret0, _ := ret[0].([]*compute2.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockClientMockRecorder) ListImages(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockClient)(nil).ListImages), varargs...)
}

// ListImagesAlpha mocks base method.
func (m *MockClient) ListImagesAlpha(project string, opts ...compute.ListCallOption) ([]*compute0.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImagesAlpha", varargs...)
	ret0, _ := ret[0].([]*compute0.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImagesAlpha indicates an expected call of ListImagesAlpha.
func (mr *MockClientMockRecorder) ListImagesAlpha(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImagesAlpha", reflect.TypeOf((*MockClient)(nil).ListImagesAlpha), varargs...)
}

// ListInstances mocks base method.
func (m *MockClient) ListInstances(project, zone string, opts ...compute.ListCallOption) ([]*compute2.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, zone}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstances", varargs...)
	ret0, _ := ret[0].([]*compute2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockClientMockRecorder) ListInstances(project, zone interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, zone}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockClient)(nil).ListInstances), varargs...)
}

// ListLicenses mocks base method.
func (m *MockClient) ListLicenses(project string, opts ...compute.ListCallOption) ([]*compute2.License, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLicenses", varargs...)
	ret0, _ := ret[0].([]*compute2.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLicenses indicates an expected call of ListLicenses.
func (mr *MockClientMockRecorder) ListLicenses(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenses", reflect.TypeOf((*MockClient)(nil).ListLicenses), varargs...)
}

// ListMachineImages mocks base method.
func (m *MockClient) ListMachineImages(project string, opts ...compute.ListCallOption) ([]*compute2.MachineImage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMachineImages", varargs...)
	ret0, _ := ret[0].([]*compute2.MachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineImages indicates an expected call of ListMachineImages.
func (mr *MockClientMockRecorder) ListMachineImages(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineImages", reflect.TypeOf((*MockClient)(nil).ListMachineImages), varargs...)
}

// ListMachineTypes mocks base method.
func (m *MockClient) ListMachineTypes(project, zone string, opts ...compute.ListCallOption) ([]*compute2.MachineType, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, zone}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMachineTypes", varargs...)
	ret0, _ := ret[0].([]*compute2.MachineType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineTypes indicates an expected call of ListMachineTypes.
func (mr *MockClientMockRecorder) ListMachineTypes(project, zone interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, zone}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineTypes", reflect.TypeOf((*MockClient)(nil).ListMachineTypes), varargs...)
}

// ListNetworks mocks base method.
func (m *MockClient) ListNetworks(project string, opts ...compute.ListCallOption) ([]*compute2.Network, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNetworks", varargs...)
	ret0, _ := ret[0].([]*compute2.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworks indicates an expected call of ListNetworks.
func (mr *MockClientMockRecorder) ListNetworks(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworks", reflect.TypeOf((*MockClient)(nil).ListNetworks), varargs...)
}

// ListRegions mocks base method.
func (m *MockClient) ListRegions(project string, opts ...compute.ListCallOption) ([]*compute2.Region, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegions", varargs...)
	ret0, _ := ret[0].([]*compute2.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockClientMockRecorder) ListRegions(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockClient)(nil).ListRegions), varargs...)
}

// ListSnapshots mocks base method.
func (m *MockClient) ListSnapshots(project string, opts ...compute.ListCallOption) ([]*compute2.Snapshot, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshots", varargs...)
	ret0, _ := ret[0].([]*compute2.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockClientMockRecorder) ListSnapshots(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockClient)(nil).ListSnapshots), varargs...)
}

// ListSubnetworks mocks base method.
func (m *MockClient) ListSubnetworks(project, region string, opts ...compute.ListCallOption) ([]*compute2.Subnetwork, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, region}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubnetworks", varargs...)
	ret0, _ := ret[0].([]*compute2.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnetworks indicates an expected call of ListSubnetworks.
func (mr *MockClientMockRecorder) ListSubnetworks(project, region interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, region}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnetworks", reflect.TypeOf((*MockClient)(nil).ListSubnetworks), varargs...)
}

// ListTargetInstances mocks base method.
func (m *MockClient) ListTargetInstances(project, zone string, opts ...compute.ListCallOption) ([]*compute2.TargetInstance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, zone}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetInstances", varargs...)
	ret0, _ := ret[0].([]*compute2.TargetInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetInstances indicates an expected call of ListTargetInstances.
func (mr *MockClientMockRecorder) ListTargetInstances(project, zone interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, zone}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetInstances", reflect.TypeOf((*MockClient)(nil).ListTargetInstances), varargs...)
}

// ListZones mocks base method.
func (m *MockClient) ListZones(project string, opts ...compute.ListCallOption) ([]*compute2.Zone, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListZones", varargs...)
	ret0, _ := ret[0].([]*compute2.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListZones indicates an expected call of ListZones.
func (mr *MockClientMockRecorder) ListZones(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListZones", reflect.TypeOf((*MockClient)(nil).ListZones), varargs...)
}

// ResizeDisk mocks base method.
func (m *MockClient) ResizeDisk(project, zone, disk string, drr *compute2.DisksResizeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeDisk", project, zone, disk, drr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeDisk indicates an expected call of ResizeDisk.
func (mr *MockClientMockRecorder) ResizeDisk(project, zone, disk, drr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeDisk", reflect.TypeOf((*MockClient)(nil).ResizeDisk), project, zone, disk, drr)
}

// Retry mocks base method.
func (m *MockClient) Retry(f func(...googleapi.CallOption) (*compute2.Operation, error), opts ...googleapi.CallOption) (*compute2.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{f}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retry", varargs...)
	ret0, _ := ret[0].(*compute2.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retry indicates an expected call of Retry.
func (mr *MockClientMockRecorder) Retry(f interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{f}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retry", reflect.TypeOf((*MockClient)(nil).Retry), varargs...)
}

// RetryBeta mocks base method.
func (m *MockClient) RetryBeta(f func(...googleapi.CallOption) (*compute1.Operation, error), opts ...googleapi.CallOption) (*compute1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{f}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryBeta", varargs...)
	ret0, _ := ret[0].(*compute1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryBeta indicates an expected call of RetryBeta.
func (mr *MockClientMockRecorder) RetryBeta(f interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{f}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryBeta", reflect.TypeOf((*MockClient)(nil).RetryBeta), varargs...)
}

// SetCommonInstanceMetadata mocks base method.
func (m *MockClient) SetCommonInstanceMetadata(project string, md *compute2.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommonInstanceMetadata", project, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCommonInstanceMetadata indicates an expected call of SetCommonInstanceMetadata.
func (mr *MockClientMockRecorder) SetCommonInstanceMetadata(project, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommonInstanceMetadata", reflect.TypeOf((*MockClient)(nil).SetCommonInstanceMetadata), project, md)
}

// SetDiskAutoDelete mocks base method.
func (m *MockClient) SetDiskAutoDelete(project, zone, instance string, autoDelete bool, deviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDiskAutoDelete", project, zone, instance, autoDelete, deviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDiskAutoDelete indicates an expected call of SetDiskAutoDelete.
func (mr *MockClientMockRecorder) SetDiskAutoDelete(project, zone, instance, autoDelete, deviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiskAutoDelete", reflect.TypeOf((*MockClient)(nil).SetDiskAutoDelete), project, zone, instance, autoDelete, deviceName)
}

// SetInstanceMetadata mocks base method.
func (m *MockClient) SetInstanceMetadata(project, zone, name string, md *compute2.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceMetadata", project, zone, name, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceMetadata indicates an expected call of SetInstanceMetadata.
func (mr *MockClientMockRecorder) SetInstanceMetadata(project, zone, name, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceMetadata", reflect.TypeOf((*MockClient)(nil).SetInstanceMetadata), project, zone, name, md)
}

// StartInstance mocks base method.
func (m *MockClient) StartInstance(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockClientMockRecorder) StartInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockClient)(nil).StartInstance), project, zone, name)
}

// StopInstance mocks base method.
func (m *MockClient) StopInstance(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstance", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstance indicates an expected call of StopInstance.
func (mr *MockClientMockRecorder) StopInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstance", reflect.TypeOf((*MockClient)(nil).StopInstance), project, zone, name)
}

// MockListCallOption is a mock of ListCallOption interface.
type MockListCallOption struct {
	ctrl     *gomock.Controller
	recorder *MockListCallOptionMockRecorder
}

// MockListCallOptionMockRecorder is the mock recorder for MockListCallOption.
type MockListCallOptionMockRecorder struct {
	mock *MockListCallOption
}

// NewMockListCallOption creates a new mock instance.
func NewMockListCallOption(ctrl *gomock.Controller) *MockListCallOption {
	mock := &MockListCallOption{ctrl: ctrl}
	mock.recorder = &MockListCallOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListCallOption) EXPECT() *MockListCallOptionMockRecorder {
	return m.recorder
}

// listCallOptionApply mocks base method.
func (m *MockListCallOption) listCallOptionApply(arg0 interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listCallOptionApply", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// listCallOptionApply indicates an expected call of listCallOptionApply.
func (mr *MockListCallOptionMockRecorder) listCallOptionApply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listCallOptionApply", reflect.TypeOf((*MockListCallOption)(nil).listCallOptionApply), arg0)
}

// MockclientImpl is a mock of clientImpl interface.
type MockclientImpl struct {
	ctrl     *gomock.Controller
	recorder *MockclientImplMockRecorder
}

// MockclientImplMockRecorder is the mock recorder for MockclientImpl.
type MockclientImplMockRecorder struct {
	mock *MockclientImpl
}

// NewMockclientImpl creates a new mock instance.
func NewMockclientImpl(ctrl *gomock.Controller) *MockclientImpl {
	mock := &MockclientImpl{ctrl: ctrl}
	mock.recorder = &MockclientImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientImpl) EXPECT() *MockclientImplMockRecorder {
	return m.recorder
}

// AggregatedListDisks mocks base method.
func (m *MockclientImpl) AggregatedListDisks(project string, opts ...compute.ListCallOption) ([]*compute2.Disk, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AggregatedListDisks", varargs...)
	ret0, _ := ret[0].([]*compute2.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregatedListDisks indicates an expected call of AggregatedListDisks.
func (mr *MockclientImplMockRecorder) AggregatedListDisks(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatedListDisks", reflect.TypeOf((*MockclientImpl)(nil).AggregatedListDisks), varargs...)
}

// AggregatedListInstances mocks base method.
func (m *MockclientImpl) AggregatedListInstances(project string, opts ...compute.ListCallOption) ([]*compute2.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AggregatedListInstances", varargs...)
	ret0, _ := ret[0].([]*compute2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregatedListInstances indicates an expected call of AggregatedListInstances.
func (mr *MockclientImplMockRecorder) AggregatedListInstances(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatedListInstances", reflect.TypeOf((*MockclientImpl)(nil).AggregatedListInstances), varargs...)
}

// AggregatedListSubnetworks mocks base method.
func (m *MockclientImpl) AggregatedListSubnetworks(project string, opts ...compute.ListCallOption) ([]*compute2.Subnetwork, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AggregatedListSubnetworks", varargs...)
	ret0, _ := ret[0].([]*compute2.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregatedListSubnetworks indicates an expected call of AggregatedListSubnetworks.
func (mr *MockclientImplMockRecorder) AggregatedListSubnetworks(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregatedListSubnetworks", reflect.TypeOf((*MockclientImpl)(nil).AggregatedListSubnetworks), varargs...)
}

// AttachDisk mocks base method.
func (m *MockclientImpl) AttachDisk(project, zone, instance string, d *compute2.AttachedDisk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachDisk", project, zone, instance, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachDisk indicates an expected call of AttachDisk.
func (mr *MockclientImplMockRecorder) AttachDisk(project, zone, instance, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDisk", reflect.TypeOf((*MockclientImpl)(nil).AttachDisk), project, zone, instance, d)
}

// BasePath mocks base method.
func (m *MockclientImpl) BasePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BasePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// BasePath indicates an expected call of BasePath.
func (mr *MockclientImplMockRecorder) BasePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BasePath", reflect.TypeOf((*MockclientImpl)(nil).BasePath))
}

// CreateDisk mocks base method.
func (m *MockclientImpl) CreateDisk(project, zone string, d *compute2.Disk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisk", project, zone, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDisk indicates an expected call of CreateDisk.
func (mr *MockclientImplMockRecorder) CreateDisk(project, zone, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisk", reflect.TypeOf((*MockclientImpl)(nil).CreateDisk), project, zone, d)
}

// CreateDiskAlpha mocks base method.
func (m *MockclientImpl) CreateDiskAlpha(project, zone string, d *compute0.Disk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiskAlpha", project, zone, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiskAlpha indicates an expected call of CreateDiskAlpha.
func (mr *MockclientImplMockRecorder) CreateDiskAlpha(project, zone, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskAlpha", reflect.TypeOf((*MockclientImpl)(nil).CreateDiskAlpha), project, zone, d)
}

// CreateDiskBeta mocks base method.
func (m *MockclientImpl) CreateDiskBeta(project, zone string, d *compute1.Disk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiskBeta", project, zone, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDiskBeta indicates an expected call of CreateDiskBeta.
func (mr *MockclientImplMockRecorder) CreateDiskBeta(project, zone, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiskBeta", reflect.TypeOf((*MockclientImpl)(nil).CreateDiskBeta), project, zone, d)
}

// CreateFirewallRule mocks base method.
func (m *MockclientImpl) CreateFirewallRule(project string, i *compute2.Firewall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirewallRule", project, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFirewallRule indicates an expected call of CreateFirewallRule.
func (mr *MockclientImplMockRecorder) CreateFirewallRule(project, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirewallRule", reflect.TypeOf((*MockclientImpl)(nil).CreateFirewallRule), project, i)
}

// CreateForwardingRule mocks base method.
func (m *MockclientImpl) CreateForwardingRule(project, region string, fr *compute2.ForwardingRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForwardingRule", project, region, fr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateForwardingRule indicates an expected call of CreateForwardingRule.
func (mr *MockclientImplMockRecorder) CreateForwardingRule(project, region, fr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForwardingRule", reflect.TypeOf((*MockclientImpl)(nil).CreateForwardingRule), project, region, fr)
}

// CreateImage mocks base method.
func (m *MockclientImpl) CreateImage(project string, i *compute2.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", project, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockclientImplMockRecorder) CreateImage(project, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockclientImpl)(nil).CreateImage), project, i)
}

// CreateImageAlpha mocks base method.
func (m *MockclientImpl) CreateImageAlpha(project string, i *compute0.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageAlpha", project, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageAlpha indicates an expected call of CreateImageAlpha.
func (mr *MockclientImplMockRecorder) CreateImageAlpha(project, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageAlpha", reflect.TypeOf((*MockclientImpl)(nil).CreateImageAlpha), project, i)
}

// CreateImageBeta mocks base method.
func (m *MockclientImpl) CreateImageBeta(project string, i *compute1.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageBeta", project, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageBeta indicates an expected call of CreateImageBeta.
func (mr *MockclientImplMockRecorder) CreateImageBeta(project, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageBeta", reflect.TypeOf((*MockclientImpl)(nil).CreateImageBeta), project, i)
}

// CreateInstance mocks base method.
func (m *MockclientImpl) CreateInstance(project, zone string, i *compute2.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", project, zone, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockclientImplMockRecorder) CreateInstance(project, zone, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockclientImpl)(nil).CreateInstance), project, zone, i)
}

// CreateInstanceAlpha mocks base method.
func (m *MockclientImpl) CreateInstanceAlpha(project, zone string, i *compute0.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceAlpha", project, zone, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceAlpha indicates an expected call of CreateInstanceAlpha.
func (mr *MockclientImplMockRecorder) CreateInstanceAlpha(project, zone, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceAlpha", reflect.TypeOf((*MockclientImpl)(nil).CreateInstanceAlpha), project, zone, i)
}

// CreateInstanceBeta mocks base method.
func (m *MockclientImpl) CreateInstanceBeta(project, zone string, i *compute1.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceBeta", project, zone, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceBeta indicates an expected call of CreateInstanceBeta.
func (mr *MockclientImplMockRecorder) CreateInstanceBeta(project, zone, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceBeta", reflect.TypeOf((*MockclientImpl)(nil).CreateInstanceBeta), project, zone, i)
}

// CreateMachineImage mocks base method.
func (m *MockclientImpl) CreateMachineImage(project string, i *compute2.MachineImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachineImage", project, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMachineImage indicates an expected call of CreateMachineImage.
func (mr *MockclientImplMockRecorder) CreateMachineImage(project, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachineImage", reflect.TypeOf((*MockclientImpl)(nil).CreateMachineImage), project, i)
}

// CreateNetwork mocks base method.
func (m *MockclientImpl) CreateNetwork(project string, n *compute2.Network) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", project, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockclientImplMockRecorder) CreateNetwork(project, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockclientImpl)(nil).CreateNetwork), project, n)
}

// CreateSnapshot mocks base method.
func (m *MockclientImpl) CreateSnapshot(project, zone, disk string, s *compute2.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", project, zone, disk, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockclientImplMockRecorder) CreateSnapshot(project, zone, disk, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockclientImpl)(nil).CreateSnapshot), project, zone, disk, s)
}

// CreateSubnetwork mocks base method.
func (m *MockclientImpl) CreateSubnetwork(project, region string, n *compute2.Subnetwork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnetwork", project, region, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubnetwork indicates an expected call of CreateSubnetwork.
func (mr *MockclientImplMockRecorder) CreateSubnetwork(project, region, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetwork", reflect.TypeOf((*MockclientImpl)(nil).CreateSubnetwork), project, region, n)
}

// CreateTargetInstance mocks base method.
func (m *MockclientImpl) CreateTargetInstance(project, zone string, ti *compute2.TargetInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetInstance", project, zone, ti)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTargetInstance indicates an expected call of CreateTargetInstance.
func (mr *MockclientImplMockRecorder) CreateTargetInstance(project, zone, ti interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetInstance", reflect.TypeOf((*MockclientImpl)(nil).CreateTargetInstance), project, zone, ti)
}

// DeleteDisk mocks base method.
func (m *MockclientImpl) DeleteDisk(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisk", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDisk indicates an expected call of DeleteDisk.
func (mr *MockclientImplMockRecorder) DeleteDisk(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisk", reflect.TypeOf((*MockclientImpl)(nil).DeleteDisk), project, zone, name)
}

// DeleteFirewallRule mocks base method.
func (m *MockclientImpl) DeleteFirewallRule(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallRule", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFirewallRule indicates an expected call of DeleteFirewallRule.
func (mr *MockclientImplMockRecorder) DeleteFirewallRule(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallRule", reflect.TypeOf((*MockclientImpl)(nil).DeleteFirewallRule), project, name)
}

// DeleteForwardingRule mocks base method.
func (m *MockclientImpl) DeleteForwardingRule(project, region, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForwardingRule", project, region, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForwardingRule indicates an expected call of DeleteForwardingRule.
func (mr *MockclientImplMockRecorder) DeleteForwardingRule(project, region, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForwardingRule", reflect.TypeOf((*MockclientImpl)(nil).DeleteForwardingRule), project, region, name)
}

// DeleteImage mocks base method.
func (m *MockclientImpl) DeleteImage(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockclientImplMockRecorder) DeleteImage(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockclientImpl)(nil).DeleteImage), project, name)
}

// DeleteInstance mocks base method.
func (m *MockclientImpl) DeleteInstance(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockclientImplMockRecorder) DeleteInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockclientImpl)(nil).DeleteInstance), project, zone, name)
}

// DeleteMachineImage mocks base method.
func (m *MockclientImpl) DeleteMachineImage(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachineImage", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachineImage indicates an expected call of DeleteMachineImage.
func (mr *MockclientImplMockRecorder) DeleteMachineImage(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachineImage", reflect.TypeOf((*MockclientImpl)(nil).DeleteMachineImage), project, name)
}

// DeleteNetwork mocks base method.
func (m *MockclientImpl) DeleteNetwork(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockclientImplMockRecorder) DeleteNetwork(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockclientImpl)(nil).DeleteNetwork), project, name)
}

// DeleteSnapshot mocks base method.
func (m *MockclientImpl) DeleteSnapshot(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockclientImplMockRecorder) DeleteSnapshot(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockclientImpl)(nil).DeleteSnapshot), project, name)
}

// DeleteSubnetwork mocks base method.
func (m *MockclientImpl) DeleteSubnetwork(project, region, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnetwork", project, region, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnetwork indicates an expected call of DeleteSubnetwork.
func (mr *MockclientImplMockRecorder) DeleteSubnetwork(project, region, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetwork", reflect.TypeOf((*MockclientImpl)(nil).DeleteSubnetwork), project, region, name)
}

// DeleteTargetInstance mocks base method.
func (m *MockclientImpl) DeleteTargetInstance(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetInstance", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTargetInstance indicates an expected call of DeleteTargetInstance.
func (mr *MockclientImplMockRecorder) DeleteTargetInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetInstance", reflect.TypeOf((*MockclientImpl)(nil).DeleteTargetInstance), project, zone, name)
}

// DeprecateImage mocks base method.
func (m *MockclientImpl) DeprecateImage(project, name string, deprecationstatus *compute2.DeprecationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeprecateImage", project, name, deprecationstatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeprecateImage indicates an expected call of DeprecateImage.
func (mr *MockclientImplMockRecorder) DeprecateImage(project, name, deprecationstatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprecateImage", reflect.TypeOf((*MockclientImpl)(nil).DeprecateImage), project, name, deprecationstatus)
}

// DeprecateImageAlpha mocks base method.
func (m *MockclientImpl) DeprecateImageAlpha(project, name string, deprecationstatus *compute0.DeprecationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeprecateImageAlpha", project, name, deprecationstatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeprecateImageAlpha indicates an expected call of DeprecateImageAlpha.
func (mr *MockclientImplMockRecorder) DeprecateImageAlpha(project, name, deprecationstatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprecateImageAlpha", reflect.TypeOf((*MockclientImpl)(nil).DeprecateImageAlpha), project, name, deprecationstatus)
}

// DetachDisk mocks base method.
func (m *MockclientImpl) DetachDisk(project, zone, instance, disk string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachDisk", project, zone, instance, disk)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachDisk indicates an expected call of DetachDisk.
func (mr *MockclientImplMockRecorder) DetachDisk(project, zone, instance, disk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDisk", reflect.TypeOf((*MockclientImpl)(nil).DetachDisk), project, zone, instance, disk)
}

// GetDisk mocks base method.
func (m *MockclientImpl) GetDisk(project, zone, name string) (*compute2.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisk", project, zone, name)
	ret0, _ := ret[0].(*compute2.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisk indicates an expected call of GetDisk.
func (mr *MockclientImplMockRecorder) GetDisk(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisk", reflect.TypeOf((*MockclientImpl)(nil).GetDisk), project, zone, name)
}

// GetDiskAlpha mocks base method.
func (m *MockclientImpl) GetDiskAlpha(project, zone, name string) (*compute0.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskAlpha", project, zone, name)
	ret0, _ := ret[0].(*compute0.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskAlpha indicates an expected call of GetDiskAlpha.
func (mr *MockclientImplMockRecorder) GetDiskAlpha(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskAlpha", reflect.TypeOf((*MockclientImpl)(nil).GetDiskAlpha), project, zone, name)
}

// GetDiskBeta mocks base method.
func (m *MockclientImpl) GetDiskBeta(project, zone, name string) (*compute1.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskBeta", project, zone, name)
	ret0, _ := ret[0].(*compute1.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskBeta indicates an expected call of GetDiskBeta.
func (mr *MockclientImplMockRecorder) GetDiskBeta(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskBeta", reflect.TypeOf((*MockclientImpl)(nil).GetDiskBeta), project, zone, name)
}

// GetFirewallRule mocks base method.
func (m *MockclientImpl) GetFirewallRule(project, name string) (*compute2.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRule", project, name)
	ret0, _ := ret[0].(*compute2.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRule indicates an expected call of GetFirewallRule.
func (mr *MockclientImplMockRecorder) GetFirewallRule(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRule", reflect.TypeOf((*MockclientImpl)(nil).GetFirewallRule), project, name)
}

// GetForwardingRule mocks base method.
func (m *MockclientImpl) GetForwardingRule(project, region, name string) (*compute2.ForwardingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForwardingRule", project, region, name)
	ret0, _ := ret[0].(*compute2.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForwardingRule indicates an expected call of GetForwardingRule.
func (mr *MockclientImplMockRecorder) GetForwardingRule(project, region, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForwardingRule", reflect.TypeOf((*MockclientImpl)(nil).GetForwardingRule), project, region, name)
}

// GetGuestAttributes mocks base method.
func (m *MockclientImpl) GetGuestAttributes(project, zone, name, queryPath, variableKey string) (*compute2.GuestAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestAttributes", project, zone, name, queryPath, variableKey)
	ret0, _ := ret[0].(*compute2.GuestAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestAttributes indicates an expected call of GetGuestAttributes.
func (mr *MockclientImplMockRecorder) GetGuestAttributes(project, zone, name, queryPath, variableKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestAttributes", reflect.TypeOf((*MockclientImpl)(nil).GetGuestAttributes), project, zone, name, queryPath, variableKey)
}

// GetImage mocks base method.
func (m *MockclientImpl) GetImage(project, name string) (*compute2.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", project, name)
	ret0, _ := ret[0].(*compute2.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockclientImplMockRecorder) GetImage(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockclientImpl)(nil).GetImage), project, name)
}

// GetImageAlpha mocks base method.
func (m *MockclientImpl) GetImageAlpha(project, name string) (*compute0.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlpha", project, name)
	ret0, _ := ret[0].(*compute0.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAlpha indicates an expected call of GetImageAlpha.
func (mr *MockclientImplMockRecorder) GetImageAlpha(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlpha", reflect.TypeOf((*MockclientImpl)(nil).GetImageAlpha), project, name)
}

// GetImageBeta mocks base method.
func (m *MockclientImpl) GetImageBeta(project, name string) (*compute1.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageBeta", project, name)
	ret0, _ := ret[0].(*compute1.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageBeta indicates an expected call of GetImageBeta.
func (mr *MockclientImplMockRecorder) GetImageBeta(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageBeta", reflect.TypeOf((*MockclientImpl)(nil).GetImageBeta), project, name)
}

// GetImageFromFamily mocks base method.
func (m *MockclientImpl) GetImageFromFamily(project, family string) (*compute2.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFromFamily", project, family)
	ret0, _ := ret[0].(*compute2.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFromFamily indicates an expected call of GetImageFromFamily.
func (mr *MockclientImplMockRecorder) GetImageFromFamily(project, family interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFromFamily", reflect.TypeOf((*MockclientImpl)(nil).GetImageFromFamily), project, family)
}

// GetInstance mocks base method.
func (m *MockclientImpl) GetInstance(project, zone, name string) (*compute2.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", project, zone, name)
	ret0, _ := ret[0].(*compute2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockclientImplMockRecorder) GetInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockclientImpl)(nil).GetInstance), project, zone, name)
}

// GetInstanceAlpha mocks base method.
func (m *MockclientImpl) GetInstanceAlpha(project, zone, name string) (*compute0.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceAlpha", project, zone, name)
	ret0, _ := ret[0].(*compute0.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceAlpha indicates an expected call of GetInstanceAlpha.
func (mr *MockclientImplMockRecorder) GetInstanceAlpha(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceAlpha", reflect.TypeOf((*MockclientImpl)(nil).GetInstanceAlpha), project, zone, name)
}

// GetInstanceBeta mocks base method.
func (m *MockclientImpl) GetInstanceBeta(project, zone, name string) (*compute1.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBeta", project, zone, name)
	ret0, _ := ret[0].(*compute1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBeta indicates an expected call of GetInstanceBeta.
func (mr *MockclientImplMockRecorder) GetInstanceBeta(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBeta", reflect.TypeOf((*MockclientImpl)(nil).GetInstanceBeta), project, zone, name)
}

// GetLicense mocks base method.
func (m *MockclientImpl) GetLicense(project, name string) (*compute2.License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicense", project, name)
	ret0, _ := ret[0].(*compute2.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicense indicates an expected call of GetLicense.
func (mr *MockclientImplMockRecorder) GetLicense(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockclientImpl)(nil).GetLicense), project, name)
}

// GetMachineImage mocks base method.
func (m *MockclientImpl) GetMachineImage(project, name string) (*compute2.MachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineImage", project, name)
	ret0, _ := ret[0].(*compute2.MachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineImage indicates an expected call of GetMachineImage.
func (mr *MockclientImplMockRecorder) GetMachineImage(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineImage", reflect.TypeOf((*MockclientImpl)(nil).GetMachineImage), project, name)
}

// GetMachineType mocks base method.
func (m *MockclientImpl) GetMachineType(project, zone, machineType string) (*compute2.MachineType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineType", project, zone, machineType)
	ret0, _ := ret[0].(*compute2.MachineType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineType indicates an expected call of GetMachineType.
func (mr *MockclientImplMockRecorder) GetMachineType(project, zone, machineType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineType", reflect.TypeOf((*MockclientImpl)(nil).GetMachineType), project, zone, machineType)
}

// GetNetwork mocks base method.
func (m *MockclientImpl) GetNetwork(project, name string) (*compute2.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", project, name)
	ret0, _ := ret[0].(*compute2.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockclientImplMockRecorder) GetNetwork(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockclientImpl)(nil).GetNetwork), project, name)
}

// GetProject mocks base method.
func (m *MockclientImpl) GetProject(project string) (*compute2.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", project)
	ret0, _ := ret[0].(*compute2.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockclientImplMockRecorder) GetProject(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockclientImpl)(nil).GetProject), project)
}

// GetRegion mocks base method.
func (m *MockclientImpl) GetRegion(project, region string) (*compute2.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", project, region)
	ret0, _ := ret[0].(*compute2.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockclientImplMockRecorder) GetRegion(project, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockclientImpl)(nil).GetRegion), project, region)
}

// GetSerialPortOutput mocks base method.
func (m *MockclientImpl) GetSerialPortOutput(project, zone, name string, port, start int64) (*compute2.SerialPortOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSerialPortOutput", project, zone, name, port, start)
	ret0, _ := ret[0].(*compute2.SerialPortOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSerialPortOutput indicates an expected call of GetSerialPortOutput.
func (mr *MockclientImplMockRecorder) GetSerialPortOutput(project, zone, name, port, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerialPortOutput", reflect.TypeOf((*MockclientImpl)(nil).GetSerialPortOutput), project, zone, name, port, start)
}

// GetSnapshot mocks base method.
func (m *MockclientImpl) GetSnapshot(project, name string) (*compute2.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", project, name)
	ret0, _ := ret[0].(*compute2.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockclientImplMockRecorder) GetSnapshot(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockclientImpl)(nil).GetSnapshot), project, name)
}

// GetSubnetwork mocks base method.
func (m *MockclientImpl) GetSubnetwork(project, region, name string) (*compute2.Subnetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetwork", project, region, name)
	ret0, _ := ret[0].(*compute2.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetwork indicates an expected call of GetSubnetwork.
func (mr *MockclientImplMockRecorder) GetSubnetwork(project, region, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetwork", reflect.TypeOf((*MockclientImpl)(nil).GetSubnetwork), project, region, name)
}

// GetTargetInstance mocks base method.
func (m *MockclientImpl) GetTargetInstance(project, zone, name string) (*compute2.TargetInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetInstance", project, zone, name)
	ret0, _ := ret[0].(*compute2.TargetInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetInstance indicates an expected call of GetTargetInstance.
func (mr *MockclientImplMockRecorder) GetTargetInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetInstance", reflect.TypeOf((*MockclientImpl)(nil).GetTargetInstance), project, zone, name)
}

// GetZone mocks base method.
func (m *MockclientImpl) GetZone(project, zone string) (*compute2.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZone", project, zone)
	ret0, _ := ret[0].(*compute2.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZone indicates an expected call of GetZone.
func (mr *MockclientImplMockRecorder) GetZone(project, zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZone", reflect.TypeOf((*MockclientImpl)(nil).GetZone), project, zone)
}

// InstanceStatus mocks base method.
func (m *MockclientImpl) InstanceStatus(project, zone, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceStatus", project, zone, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceStatus indicates an expected call of InstanceStatus.
func (mr *MockclientImplMockRecorder) InstanceStatus(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceStatus", reflect.TypeOf((*MockclientImpl)(nil).InstanceStatus), project, zone, name)
}

// InstanceStopped mocks base method.
func (m *MockclientImpl) InstanceStopped(project, zone, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceStopped", project, zone, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceStopped indicates an expected call of InstanceStopped.
func (mr *MockclientImplMockRecorder) InstanceStopped(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceStopped", reflect.TypeOf((*MockclientImpl)(nil).InstanceStopped), project, zone, name)
}

// ListDisks mocks base method.
func (m *MockclientImpl) ListDisks(project, zone string, opts ...compute.ListCallOption) ([]*compute2.Disk, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, zone}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDisks", varargs...)
	ret0, _ := ret[0].([]*compute2.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisks indicates an expected call of ListDisks.
func (mr *MockclientImplMockRecorder) ListDisks(project, zone interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, zone}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisks", reflect.TypeOf((*MockclientImpl)(nil).ListDisks), varargs...)
}

// ListFirewallRules mocks base method.
func (m *MockclientImpl) ListFirewallRules(project string, opts ...compute.ListCallOption) ([]*compute2.Firewall, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFirewallRules", varargs...)
	ret0, _ := ret[0].([]*compute2.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewallRules indicates an expected call of ListFirewallRules.
func (mr *MockclientImplMockRecorder) ListFirewallRules(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewallRules", reflect.TypeOf((*MockclientImpl)(nil).ListFirewallRules), varargs...)
}

// ListForwardingRules mocks base method.
func (m *MockclientImpl) ListForwardingRules(project, zone string, opts ...compute.ListCallOption) ([]*compute2.ForwardingRule, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, zone}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListForwardingRules", varargs...)
	ret0, _ := ret[0].([]*compute2.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForwardingRules indicates an expected call of ListForwardingRules.
func (mr *MockclientImplMockRecorder) ListForwardingRules(project, zone interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, zone}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForwardingRules", reflect.TypeOf((*MockclientImpl)(nil).ListForwardingRules), varargs...)
}

// ListImages mocks base method.
func (m *MockclientImpl) ListImages(project string, opts ...compute.ListCallOption) ([]*compute2.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImages", varargs...)
	ret0, _ := ret[0].([]*compute2.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockclientImplMockRecorder) ListImages(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockclientImpl)(nil).ListImages), varargs...)
}

// ListImagesAlpha mocks base method.
func (m *MockclientImpl) ListImagesAlpha(project string, opts ...compute.ListCallOption) ([]*compute0.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImagesAlpha", varargs...)
	ret0, _ := ret[0].([]*compute0.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImagesAlpha indicates an expected call of ListImagesAlpha.
func (mr *MockclientImplMockRecorder) ListImagesAlpha(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImagesAlpha", reflect.TypeOf((*MockclientImpl)(nil).ListImagesAlpha), varargs...)
}

// ListInstances mocks base method.
func (m *MockclientImpl) ListInstances(project, zone string, opts ...compute.ListCallOption) ([]*compute2.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, zone}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstances", varargs...)
	ret0, _ := ret[0].([]*compute2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockclientImplMockRecorder) ListInstances(project, zone interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, zone}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockclientImpl)(nil).ListInstances), varargs...)
}

// ListLicenses mocks base method.
func (m *MockclientImpl) ListLicenses(project string, opts ...compute.ListCallOption) ([]*compute2.License, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLicenses", varargs...)
	ret0, _ := ret[0].([]*compute2.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLicenses indicates an expected call of ListLicenses.
func (mr *MockclientImplMockRecorder) ListLicenses(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenses", reflect.TypeOf((*MockclientImpl)(nil).ListLicenses), varargs...)
}

// ListMachineImages mocks base method.
func (m *MockclientImpl) ListMachineImages(project string, opts ...compute.ListCallOption) ([]*compute2.MachineImage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMachineImages", varargs...)
	ret0, _ := ret[0].([]*compute2.MachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineImages indicates an expected call of ListMachineImages.
func (mr *MockclientImplMockRecorder) ListMachineImages(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineImages", reflect.TypeOf((*MockclientImpl)(nil).ListMachineImages), varargs...)
}

// ListMachineTypes mocks base method.
func (m *MockclientImpl) ListMachineTypes(project, zone string, opts ...compute.ListCallOption) ([]*compute2.MachineType, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, zone}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMachineTypes", varargs...)
	ret0, _ := ret[0].([]*compute2.MachineType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineTypes indicates an expected call of ListMachineTypes.
func (mr *MockclientImplMockRecorder) ListMachineTypes(project, zone interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, zone}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineTypes", reflect.TypeOf((*MockclientImpl)(nil).ListMachineTypes), varargs...)
}

// ListNetworks mocks base method.
func (m *MockclientImpl) ListNetworks(project string, opts ...compute.ListCallOption) ([]*compute2.Network, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNetworks", varargs...)
	ret0, _ := ret[0].([]*compute2.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworks indicates an expected call of ListNetworks.
func (mr *MockclientImplMockRecorder) ListNetworks(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworks", reflect.TypeOf((*MockclientImpl)(nil).ListNetworks), varargs...)
}

// ListRegions mocks base method.
func (m *MockclientImpl) ListRegions(project string, opts ...compute.ListCallOption) ([]*compute2.Region, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegions", varargs...)
	ret0, _ := ret[0].([]*compute2.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockclientImplMockRecorder) ListRegions(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockclientImpl)(nil).ListRegions), varargs...)
}

// ListSnapshots mocks base method.
func (m *MockclientImpl) ListSnapshots(project string, opts ...compute.ListCallOption) ([]*compute2.Snapshot, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshots", varargs...)
	ret0, _ := ret[0].([]*compute2.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockclientImplMockRecorder) ListSnapshots(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockclientImpl)(nil).ListSnapshots), varargs...)
}

// ListSubnetworks mocks base method.
func (m *MockclientImpl) ListSubnetworks(project, region string, opts ...compute.ListCallOption) ([]*compute2.Subnetwork, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, region}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubnetworks", varargs...)
	ret0, _ := ret[0].([]*compute2.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnetworks indicates an expected call of ListSubnetworks.
func (mr *MockclientImplMockRecorder) ListSubnetworks(project, region interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, region}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnetworks", reflect.TypeOf((*MockclientImpl)(nil).ListSubnetworks), varargs...)
}

// ListTargetInstances mocks base method.
func (m *MockclientImpl) ListTargetInstances(project, zone string, opts ...compute.ListCallOption) ([]*compute2.TargetInstance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project, zone}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetInstances", varargs...)
	ret0, _ := ret[0].([]*compute2.TargetInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetInstances indicates an expected call of ListTargetInstances.
func (mr *MockclientImplMockRecorder) ListTargetInstances(project, zone interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project, zone}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetInstances", reflect.TypeOf((*MockclientImpl)(nil).ListTargetInstances), varargs...)
}

// ListZones mocks base method.
func (m *MockclientImpl) ListZones(project string, opts ...compute.ListCallOption) ([]*compute2.Zone, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{project}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListZones", varargs...)
	ret0, _ := ret[0].([]*compute2.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListZones indicates an expected call of ListZones.
func (mr *MockclientImplMockRecorder) ListZones(project interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{project}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListZones", reflect.TypeOf((*MockclientImpl)(nil).ListZones), varargs...)
}

// ResizeDisk mocks base method.
func (m *MockclientImpl) ResizeDisk(project, zone, disk string, drr *compute2.DisksResizeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeDisk", project, zone, disk, drr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeDisk indicates an expected call of ResizeDisk.
func (mr *MockclientImplMockRecorder) ResizeDisk(project, zone, disk, drr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeDisk", reflect.TypeOf((*MockclientImpl)(nil).ResizeDisk), project, zone, disk, drr)
}

// Retry mocks base method.
func (m *MockclientImpl) Retry(f func(...googleapi.CallOption) (*compute2.Operation, error), opts ...googleapi.CallOption) (*compute2.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{f}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retry", varargs...)
	ret0, _ := ret[0].(*compute2.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retry indicates an expected call of Retry.
func (mr *MockclientImplMockRecorder) Retry(f interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{f}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retry", reflect.TypeOf((*MockclientImpl)(nil).Retry), varargs...)
}

// RetryBeta mocks base method.
func (m *MockclientImpl) RetryBeta(f func(...googleapi.CallOption) (*compute1.Operation, error), opts ...googleapi.CallOption) (*compute1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{f}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryBeta", varargs...)
	ret0, _ := ret[0].(*compute1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryBeta indicates an expected call of RetryBeta.
func (mr *MockclientImplMockRecorder) RetryBeta(f interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{f}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryBeta", reflect.TypeOf((*MockclientImpl)(nil).RetryBeta), varargs...)
}

// SetCommonInstanceMetadata mocks base method.
func (m *MockclientImpl) SetCommonInstanceMetadata(project string, md *compute2.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommonInstanceMetadata", project, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCommonInstanceMetadata indicates an expected call of SetCommonInstanceMetadata.
func (mr *MockclientImplMockRecorder) SetCommonInstanceMetadata(project, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommonInstanceMetadata", reflect.TypeOf((*MockclientImpl)(nil).SetCommonInstanceMetadata), project, md)
}

// SetDiskAutoDelete mocks base method.
func (m *MockclientImpl) SetDiskAutoDelete(project, zone, instance string, autoDelete bool, deviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDiskAutoDelete", project, zone, instance, autoDelete, deviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDiskAutoDelete indicates an expected call of SetDiskAutoDelete.
func (mr *MockclientImplMockRecorder) SetDiskAutoDelete(project, zone, instance, autoDelete, deviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiskAutoDelete", reflect.TypeOf((*MockclientImpl)(nil).SetDiskAutoDelete), project, zone, instance, autoDelete, deviceName)
}

// SetInstanceMetadata mocks base method.
func (m *MockclientImpl) SetInstanceMetadata(project, zone, name string, md *compute2.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceMetadata", project, zone, name, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceMetadata indicates an expected call of SetInstanceMetadata.
func (mr *MockclientImplMockRecorder) SetInstanceMetadata(project, zone, name, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceMetadata", reflect.TypeOf((*MockclientImpl)(nil).SetInstanceMetadata), project, zone, name, md)
}

// StartInstance mocks base method.
func (m *MockclientImpl) StartInstance(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockclientImplMockRecorder) StartInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockclientImpl)(nil).StartInstance), project, zone, name)
}

// StopInstance mocks base method.
func (m *MockclientImpl) StopInstance(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstance", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstance indicates an expected call of StopInstance.
func (mr *MockclientImplMockRecorder) StopInstance(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstance", reflect.TypeOf((*MockclientImpl)(nil).StopInstance), project, zone, name)
}

// globalOperationsWait mocks base method.
func (m *MockclientImpl) globalOperationsWait(project, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "globalOperationsWait", project, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// globalOperationsWait indicates an expected call of globalOperationsWait.
func (mr *MockclientImplMockRecorder) globalOperationsWait(project, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "globalOperationsWait", reflect.TypeOf((*MockclientImpl)(nil).globalOperationsWait), project, name)
}

// regionOperationsWait mocks base method.
func (m *MockclientImpl) regionOperationsWait(project, region, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "regionOperationsWait", project, region, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// regionOperationsWait indicates an expected call of regionOperationsWait.
func (mr *MockclientImplMockRecorder) regionOperationsWait(project, region, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "regionOperationsWait", reflect.TypeOf((*MockclientImpl)(nil).regionOperationsWait), project, region, name)
}

// zoneOperationsWait mocks base method.
func (m *MockclientImpl) zoneOperationsWait(project, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "zoneOperationsWait", project, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// zoneOperationsWait indicates an expected call of zoneOperationsWait.
func (mr *MockclientImplMockRecorder) zoneOperationsWait(project, zone, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "zoneOperationsWait", reflect.TypeOf((*MockclientImpl)(nil).zoneOperationsWait), project, zone, name)
}
